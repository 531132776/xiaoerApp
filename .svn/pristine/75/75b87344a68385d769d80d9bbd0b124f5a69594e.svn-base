
import Message from 'muse-ui-message';
import router from '../router'
// 配置API接口地址 
// let root = process.env.API
// let root = window.ajaxUrl = "/servicecarportal";
let qs = require('qs');
// 引用axios 
let axios = require('axios');
var config = axios.defaults;
config.withCredentials = true
config.headers.post['Content-Type'] = 'application/json';
// config.headers.post['Accept'] = 'application/json';
//config.headers.post['Token'] = 'lalala';
config.timeout = 10000;
config.responseType = "json";
config.baseURL = '/servicecarportal'

// 环境的切换
// if (process.env.NODE_ENV == 'development') {    
//     config.baseURL = 'https://www.baidu.com';} 
// else if (process.env.NODE_ENV == 'debug') {    
//     config.baseURL = 'https://www.ceshi.com';
// } 
// else if (process.env.NODE_ENV == 'production') {    
//     config.baseURL = 'https://www.production.com';
// }
// let root = process.env.NODE_ENV == 'development' ? 'http://192.168.0.102:8080/servicecarportal' : 'https://www.ceshi.com'
let cancel ,promiseArr = {}
// const CancelToken = axios.CancelToken;
//请求拦截器
axios.interceptors.request.use(config => {
    //发起请求时，取消掉当前正在进行的相同请求
    if (promiseArr[config.url]) {
        promiseArr[config.url]('操作取消')
        promiseArr[config.url] = cancel
    } else {
        promiseArr[config.url] = cancel
    }
      return config
}, error => {
    return Promise.reject(error)
})

//响应拦截器即异常处理
axios.interceptors.response.use(response => {
    console.log(response)
    if(!response.data.success){
      return Promise.resolve(response.data);
      
    }
    return Promise.resolve(response.data);
}, error => {
    console.log(error)
    if (error && error.response) {
      switch (error.response.status) {
        case 400:
          error.message = '错误请求'
          break;
        case 401:
          error.message = '未授权，请重新登录'
          break;
        case 403:
          error.message = '拒绝访问'
          break;
        case 404:
          error.message = '请求错误,未找到该资源'
          // router.push('/Error/Error404');
          break;
        case 405:
          error.message = '请求方法未允许'
          break;
        case 408:
          error.message = '请求超时'
          break;
        case 500:
          error.message = '服务器端出错'
          break;
        case 501:
          error.message = '网络未实现'
          break;
        case 502:
          error.message = '网络错误'
          break;
        case 503:
          error.message = '服务不可用'
          break;
        case 504:
          error.message = '网络超时'
          break;
        case 505:
          error.message = 'http版本不支持该请求'
          break;
        default:
          error.message = `连接错误${error.response.status}`
      }
    } else {
      error.message = "连接到服务器失败"
    }
    Message.alert(error)
  	return Promise.reject(error)
})

/**
 * get方法，对应get请求
 * @param {String} url [请求的url地址]
 * @param {Object} params [请求时携带的参数]
 */
export default {
    get(url, params){    
    return new Promise((resolve, reject) =>{        
        axios.get(url, {            
            params: params        
        }).then(res => {
            resolve(res);
        }).catch(err =>{
            reject(err)        
    })    
})
},
    post(url, params) {
    return new Promise((resolve, reject) => {
         axios.post(url, params)
        .then(res => {
            resolve(res);
        })
        .catch(err =>{
            reject(err)
        })
    });
}
}